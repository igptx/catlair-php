<?php

/**********************************************************************************
 * Catlair PHP
 * Copyright (C) 2019 a@itserv.ru
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 **********************************************************************************
 * Accont records
 */

define("TYPE_ACCOUNT",  'Account'); // умолчальный идентификатор дескрипта

/**
 * Учетные записи
 */


class TAccount extends TDescript
{
    function __construct()
    {
        $this->Type = TYPE_ACCOUNT;
    }



    /*
     * Расчет хэша для пароля
     */
    private function HashByPassword($APassword)
    {
        return md5($this->Get('ID','').$APassword);
    }



    /*
     * Set hash for password
     */
    public function SetPassword($APassword)
    {
        clBeg('');
        $this->Set('Hash', $this->HashByPassword($APassword));
        $Result = $this->Flush();
        clEnd($Result);
        return $Result;
    }



    /*
     * Check password
     */
    public function CheckPassword($APassword)
    {
        return ($this->Get('Hash','') == $this -> HashByPassword($APassword));
    }



    /**
     * Построитель контента
     */
    public function &ContentBuild($AIDLang, $AIDSite, &$AResult)
    {
        clLog('Account', ltBeg);
        // вызов сборки стандартных параметров
        $this->ContentBuildInherited($AIDLang, $AIDSite, $AResult);
        // сборка специфичных параметров
        $AResult -> Set('IDUser', $this->Get('IDUser', ''));
        clLog('', ltEnd);
        return $this;
    }



    /*
     *
     */
    public function Update($ADescript, $ALang, &$AResult)
    {
        if (array_key_exists('IDUser', $_POST)) $ADescript->Set('IDUser', $_POST['IDUser']);
        return true;
    }


    /************************************************************************************
     * Tokens
     */

    /*
     * Return token path
     */

/*
    public function Get
    {
    }
*/



    /*
     * Create token
     */
    public function TokenCreate()
    {
        /* Check and create folder  */
        /* Generate token name */
        /* Check and create folder  */
        $Result=rcOk;
        if (!$this->Prepared()) $Result='ErrorNotPrepared';
        else
        {
            $Path=clSitePath($this->IDSiteCurrent);
            if (!file_exists($Path))
            {
               if (!mkdir($Path, FILE_RIGHT, true)) $Result = 'ErrorCreateDescriptFolder';
               else
               {
               }
            }

    //        else
    //       {
    //           if (mkdir($Path, FILE_RIGHT, true)) $Result=rcOk;
    //            else $Result = 'ErrorCreateDescriptFolder';
    //        }
    //        return $Result;


        }

    //$Path = clDataPath($this->IDSiteCurrent, $this->ID);
    //         if (file_exists($Path)) $Result=rcOk;
    //        else
    //       {
    //           if (mkdir($Path, FILE_RIGHT, true)) $Result=rcOk;
    //            else $Result = 'ErrorCreateDescriptFolder';
    //        }
    //        return $Result;
    }


    // это пример разбиения пути
    //174     /*
    //175      * Function return file path to the index file witn links
    //176      * $AKey - поисковый ключ
    //177      * $ALang - язык на котором выполняется запрос
    //178      * $ASite - сайт для которого выполняется запрос
    //179      * $ACreate - создавать ли индесный путь вы случае отсутсвия
    //180      */
    //181     private function IndexPath($AKey,  $ASite, $ALang)
    //182     {
    //183         // Сбрка пути
    //184         $p = $this->IndexPathRoot($ASite, $ALang);
    //185         // Добавка пути путей исходя из длины строки
    //186         $l=mb_strlen($AKey, 'UTF-8');
    //187         if ($l>1) $p .= '/' . mb_substr($AKey, 0, 1, 'UTF-8');
    //188         if ($l>2) $p .= '/' . mb_substr($AKey, 0, 2, 'UTF-8');
    //189         if ($l>3) $p .= '/' . mb_substr($AKey, 0, 3, 'UTF-8');
    //190         return $p;
    //191     }
    //192



}


/*
 * Retun Token Path by site
 */
function clGetTokenPath($AIDSite)
{
 return  clSitePath($AIDSite) . '/tokens';
}
    //     $this->IDSiteCurrent; /*это возвращает путь. дескрипт после создания не имеет сайт. однако для работы  с ним должна произойти загрузка дескрипта и там уже сайт обязателен*/
